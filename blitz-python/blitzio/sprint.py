__author__="ghermeto"
__date__ ="$27/07/2011 23:23:38$"

import base64
from blitzio.api import Curl
from blitzio.validation import validate_url, validate

class Request:
    """Represents the request object generated by the sprint. Contains all
        of the headers and POST/PUT data, if any."""
    
    def __init__(self):
        """ line: The entire response line (HTTP/1.1 200 Okay, for example)
            method: The method used in the request
            url: The URL, including path, query arguments and hash fragments
            content: All of the response headers (as a Hash of name/value pairs)
            headers: The response content, if any """
        
        self.line = response['line']
        self.method = response['method']
        self.url = response['url']
        self.content = base64.b64decode(response['content'])
        self.headers = response['headers']

class Response:
    """ Represents the response object generated by the sprint. Contains all
        of the headers and the response payload, if any."""
        
    def __init__(self, response):
        """ line: The entire response line (HTTP/1.1 200 Okay, for example)
            status: The response status
            message: The message in the response line
            content: All of the response headers (as a Hash of name/value pairs)
            headers: The response content, if any """

        self.line = response['line']
        self.status = response['status']
        self.message = response['message']
        self.content = base64.b64decode(response['content'])
        self.headers = response['headers']

class Result:
    """ Contains the result from a successful sprint. """
    
    def __init__(self, result):
        """ region: The region from which this sprint was executed
            duration: The overall response time for the successful hit
            connect: The time it took for the TCP connection
            request: Object with the URL, headers and content,
            response: Object containing the status code, headers and content,"""

        self.region = result['region']
        self.duration = result['duration']
        self.connect = result['connect']
        self.request = Request(result['request'])
        self.response = Response(result['request'])

class Sprint(Curl):
    """ Use this to run a sprint against your app. The return values include the
        response time, the region from which the sprint was run along with the 
        full request and response headers and the response body. """
    
    def _validate(self, options):
        """ Raises a ValidationError if validation fails. """
        failed = validate(options)
        if not options.has_key('url') or not validate_url(options['url']):
            failed.append('url')
        if len(failed) > 0:
            raise blitz.curl.ValidationError('Field required', failed)
    
    def _format_result(self, result):
        """ Return the sprint result object to be passed to the callback. """
        return Result(result)